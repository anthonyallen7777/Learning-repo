(+ 2 (* 3 4) (- (+ 1 2) 3))
b/c starts with primitive = this expression is called a "call to a primitive"

the "+" is called an operator
the "2", "(* 3 4)", "(- (+ 1 2) 3)" are called operands

Ratio: A ratio is a comparison of numbers or quantities that are related
Fraction: represents a number that is part of a whole

To evaluate a primitive call:
- first reduce operands to values
- then apply primitive to the values

Intuitively:
- left to right
- inside to outside

predicates are primitives or functions that produce a boolean value (true or false)
----
MATHEMATICS
Real numbers = positive, negative, large, small, whole numbers, fractions, decimal numbers (1, 15.82, -0.1, 3/4)
Natural number = all positive whole numbers except 0
Whole number = all positive counting numbers, plus 0
Integer = all whole numbers, plus their opposites (-1, -2), plus 0
Rational number = any number that can be expressed as a fraction of two integers
(expressed as a RATIO)
Irrational number = all numbers that can't be expressed as a fraction of two integers (pi, sqrt(7)) (non-repeating or non-terminating decimal)
(cannot be expressed as a RATIO)

COMPUTER SCIENCE
Natural = all integers starting at 0,1,2,3
Number = includes all real number 1.3,1.4,2.5
----

HtDF Recipe
How to Design Functions
1. Signature, purpose and stub
2. Define examples, wrap each in check-expect
3. Template and inventory
4. Code the function body
5. Test and debug until correct

----

Signature:
Type ... -> Type
type of data the function consumes and produces
Primitive types are: Number, Integer, Natural, String, Image, Boolean

Purpose:
1 line description of what the function produces in terms of what it consumes

Stub is a function definition that:
- has correct function name
- has correct number of parameters
- produces dummy result of correct type

Examples/tests:
- examples help us understand what the function must do.
- multiple examples illustrate behavior
- wrapping in check-expect means they will also serve as unit tests for the completed function

Template:
the body of the template is the outline of the function

Code function body:
Use everything written before to know how to complete the function body
- sometimes helps to elaborate examples to show how the expected value could have been produced

---------

HtDD Recipe

Data definition consists of four or five parts:
1. A possible structure definition
2. A type comment that defines a new type name and describes how to form data
3. An interpretation that describes the correspondence between information and data
4. One or more examples of the data
5. A Template for a 1 argument function operating on data of this type

problem domain					program
information-(represents)-------->data
     ^------------(interpret)------|


type comment:
-defines a new type name
-shows how to form data of that type

template:
-skeleton for on-argument functions that consume data of this type

Data defintion describes:
-how to form data of a new type
-how to represent information as data
-how to interpret data as information
-template for operating on data

Data definition simplifies function:
-restricts data consumed
-restricts data produced
-helps generate examples
-provides template

Atomic data:
- can't be taken apart into pieces that are meaningfully part of the same problem domain

atomic distinct means there is a single specific value

use enumeration when domain information consists of two or more distinct values

use itemization when domain information is comprised of 2 or more subclasses, at least one of which is not a distinct data item

mixed data: boolean, number, string

mixed data itemizations templates must be guarded against being called on the wrong type of data

Rules for simplifying mixed data itemization templates:
- If a given subclass is the last subclass of its type, we can reduce the test to just the guard, ie. (number? c)
- If all remaing sublasses are of the same type, then we can eliminate all of the guards

Identifying the structure of the information is a key step in program design

---------


interative programs
- changing state
- changing display
- keyboard/mouse affect behavior

(big-bang 0 ; <----- initial WORLD STATE             ; X    
          (on-tick (function1 WORLD STATE))          ; X -> X
          (to-draw (function2 (function1's return))) ; X -> Image
     )

for any given use of big-bang, all the X have to be the same type

big-bang is polymorphic:
- it works for any type of world state (works with anything)

How to Design Worlds (HtDW)

World program design is divided into two phrases:
1. Domain analysis (use paper)
- 1. Sketch program scenarios
- 2. Identify constant information
- 3. Identify changing information
- 4. Identify big-bang options
2. Build the actual program
- 1. Constants
- 2. Data definitions using HtDD
- 3. Functions using HtDF
  - 1. main first
  - 2. wish list entries for big-bang handlers
- 4. Work through wish list until done

using name constants provides a single point of control
Traceability: The ability to see where each analysis element winds up in the resulting program

a wish-list entry has a signature, purpose, !!! and a stub
- It is a promise to come back and finish this function later
- In bigger programs you can have 10s or 100s of wish list entries, so it pays to disciplined about writing down what you need to do later

The analysis is hte modle of the programs
- it correctly describes the structure of the program, just with less detail

KeyEvent is one of:
- "a"  ;; an enumeration
- "b"
       ;; with one value for 
- " "  ;; each possible key press
- "\r" ;; a large enumeration

- "up"
- "down"
;; interp. represents keyboard events

For large enumerations we do WHITE-BOX TESTING
- we wll base the test on our knowledge of how the function is coded, not just what it is suppose to do.

white-box test take advantage of knowing the cond has just two cases

----------
Compound Data

define-struct

To form a structure definition:
(define-struct <name> (<name>...))
(define-struct pos (x y))

constructor: make-<structor-name>
selector(s):<structure-name>-<field-name>
predicate:<structure-name>?

(define-struct pos(x y)): defines:
construct: make-pos
selectors: pos-x pos-y
predicate: pos?