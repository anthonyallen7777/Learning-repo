Map over an array of objects

const users = [
  { name: "John Doe", id: 1 },
  { name: "Jane Doe", id: 2 },
  { name: "Billy Doe", id: 3 }
];

function App() {
    const listItems = users.map((obj) => {
    for (const [key, value] of Object.entries(obj)) {
      return <li>{key}: {value}</li>;
    }
    return null;
  });
  return (
    <>
      <h3>User names</h3>
      <ul>
         {listItems}
      </ul>
    </>
  );
}

disable button

function App() {
  const [value, setValue] = React.useState("");

  return (
    <>
      <h3>Disable Button Challenge</h3>
      <input type="text" onChange={(e) => setValue(e.target.value)} />
      <button disabled={value.length < 1}>Submit</button>
    </>
  );
}

update parent

function Child({ setValue }) {
  const updateParent = useCallback(() => {
  }, []);
  return (
    <>
      <div>Child</div>
      <button onClick={() => setValue("Parent has been updated!")}>
        Change Parent Value
      </button>
    </>
  );
}

function Parent() {
  const [value, setValue] = React.useState(
    "I need to be updated from my child"
  );

  return (
    <>
      <h3>Update Parent State Challenge (Using Callback)</h3>
      <div className="wrapper">
        <div>Parent</div>
        <div className="box-wrapper">{value}</div>
      </div>

      <div className="wrapper">
        <Child setValue={setValue} />
      </div>
    </>
  );
}


sum of two numbers

function App() {
  const [number1, setNumber1] = React.useState();
  const [number2, setNumber2] = React.useState();
  const [total, setTotal] = React.useState(0);

  return (
    <div>
      <h2>Adding Two Numbers</h2>
      <input placeholder="First Number" type="number"
        onChange={(e)=>setNumber1(e.target.value)}/>
      <input placeholder="Second Number" type="number"
        onChange={(e)=>setNumber2(e.target.value)}/>

      <button
        onClick={()=>setTotal(parseInt(number1)+parseInt(number2))}
        >Add Two Numbers</button>
      <p>Total: {total}</p>
    </div>
  );
}









need to study
closures
integration tests
cicd
pally and ax
lighthouse
circle ci and github actions
learn github
materialUI
bootstrap
coffeeScript

er diagram
amazon s3
lambda
api gateway
sqsq


<label htmlFor="word-input">Word</label>
<input id="word-input" />

by adding the htmlFor and id when you click on the label it focuses on the input

Accessibility is very important

Dont overload variable names
- similar variable names cant confuse you

TESTING
testing is good for large projects/companies

have tests that describe what the functions, components, and modules are suppose to do

so someone can go and read the test and verify certain functionailities before you even need to read through the code


(test1)
ID NAME PRIORITY LEAD
1  BOB     3       1
3  SUZY    2
4  RICK    0
5  CODY    1
2  ZACH    3       1
9  TINA    3       1
7 JAMES    3
- every entry needs to be sorted by priority
- every person can either be a leader or follower
- a leader and a follower have to be grouped together regardless of their priority
- EDGE CASE: IF BOB IS NOT IN THE LIST NO NEED TO GROUP ZACH AND TINA TOGETHER
- also they must be sorted by name


----
INTERVIEW COURSE

